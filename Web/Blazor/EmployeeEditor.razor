@page "/employees/create"
@page "/employees/edit/{id:int}"
@inherits OwningComponentBase<DataContext>
@inject NavigationManager NavManager

<link rel="stylesheet" href="/css/blazorValidation.css"/>

<PageTitle Title="@($"{Mode} Employee")"/>

<EditForm Model="Employee" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    @if (Mode == "Edit")
    {
        <div class="form-group">
            <label>Id</label>
            <InputNumber @bind-Value="Employee.Id" readonly class="form-control"/>
        </div>
    }

    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="Employee.Name" class="form-control"/>
        <ValidationMessage For="@(() => Employee.Name)"/>
    </div>

    <div class="form-group">
        <label>Department</label>
        <CustomSelect @bind-Value="Employee.DepartmentId"
                      TValue="int" Values="Departments"
                      Parser="@(str => int.Parse(str))"
                      class="form-control">
            <option selected disabled>Select a Department</option>
        </CustomSelect>
        <ValidationMessage For="@(() => Employee.DepartmentId)" />
    </div>

    <div class="form-group">
        <label>Location</label>
        <CustomSelect @bind-Value="Employee.LocationId"
                      TValue="int" Values="Locations"
                      Parser="@(str => int.Parse(str))"
                      class="form-control">
            <option selected disabled>Select a Location</option>
        </CustomSelect>
        <ValidationMessage For="@(() => Employee.LocationId)" />
    </div>

    <div class="form-group">
        <button class="btn btn-@Theme" type="submit">@Mode</button>
    </div>

</EditForm>

@code {
    DataContext Context => Service;

    [CascadingParameter(Name = "Theme")]
    public string Theme { get; set; }

    [Parameter]
    public int Id { get; set; }

    public Employee Employee { get; set; } = new Employee();

    public string Mode => Id == 0 ? "Create" : "Edit";

    public IDictionary<string, int> Departments { get; set; }
    public IDictionary<string, int> Locations { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if(Mode == "Edit")
        {
            Employee = await Context.Employees.Include(e => e.Department).Include(e => e.Location)
                .FirstOrDefaultAsync(e => e.Id == Id);
        }
        Departments = await Context.Departments.ToDictionaryAsync(d => d.Name, d => d.Id);
        Locations = await Context.Locations
            .ToDictionaryAsync(l => $"{l.City}, {l.State}", l => l.Id);
    }

    async Task HandleValidSubmit()
    {
        if (Mode == "Create") Context.Employees.Add(Employee);
        await Context.SaveChangesAsync();
        NavManager.NavigateTo("/employees");
    }

}