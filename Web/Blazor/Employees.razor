@page "/"
@page "/employees"
@inherits OwningComponentBase<DataContext>
@inject NavigationManager NavManager
@implements IDisposable

<div class="d-flex justify-content-between align-items-center">
    <PageTitle Title="Employees"/>
    <NavLink href="/employees/create" class="btn btn-primary">ADD</NavLink>
</div>
    

<TableTemplate RowType="Employee" RowData="EmployeeData" 
               PageNumber="pageNumber" TotalPages="totalPages"
               PageName="employees">
    <Head>
        <th @onclick="@HandleSortByName" style="cursor: pointer">
            <div class="d-flex justify-content-between align-items-center">
                <span>Name</span>
                <i class="bi-arrow-down-up"></i>
            </div>
        </th>
        <th @onclick="@HandleSortByDepartment" style="cursor: pointer">
            <div class="d-flex justify-content-between align-items-center">
                <span>Department</span>
                <i class="bi-arrow-down-up"></i>
            </div>
        </th>
        <th @onclick="@HandleSortByLocation" style="cursor: pointer">
            <div class="d-flex justify-content-between align-items-center">
                <span>Location</span>
                <i class="bi-arrow-down-up"></i>
            </div>
        </th>
        <th></th>
    </Head>
    <RowTemplate Context="e">
        <td>@e.Name</td>
        <td>@e.Department.Name</td>
        <td>@e.Location.City, @e.Location.State</td>
        <td class="text-right">
            <NavLink href="@($"/employees/{e.Id}")"
                     class="btn btn-sm btn-info">Details</NavLink>
            <NavLink href="@($"/employees/edit/{e.Id}")"
                     class="btn btn-sm btn-warning">Edit</NavLink>
            <button class="btn btn-sm btn-danger" @onclick="@(() => HandleDelete(e))">Delete</button>

        </td>
    </RowTemplate>
</TableTemplate>

@code 
{
    DataContext Context => Service;

    int pageNumber = 1;
    int pageSize = 6;
    int totalPages = 0;

    public IEnumerable<Employee> EmployeeData { get; set; } = Enumerable.Empty<Employee>();
    public IQueryable<Employee> Query { get; set; }
    public bool SortAscending { get; set; }

    protected override void OnInitialized()
    {
        Query = Context.Employees.Include(e => e.Department).Include(e => e.Location);

        GetPageNumberFromQuery();

        totalPages = (int)Math.Ceiling((double)Context.Employees.Count() / pageSize);

        UpdateData();

        NavManager.LocationChanged += HandleLocationChanged;
    }

    void UpdateData() =>
        EmployeeData = Query.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetPageNumberFromQuery();
        UpdateData();
        StateHasChanged();
    }

    void GetPageNumberFromQuery()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page))
        {
            pageNumber = Convert.ToInt32(page);
        }
    }

    void HandleSortByName()
    {
        Query = SortAscending ? Query.OrderBy(e => e.Name) : Query.OrderByDescending(e => e.Name);
        SortAscending = !SortAscending;
        UpdateData();
        StateHasChanged();
    }

    void HandleSortByDepartment(){
        Query = SortAscending ? Query.OrderBy(e => e.Department.Name) : Query.OrderByDescending(e => e.Department.Name);
        SortAscending = !SortAscending;
        UpdateData();
        StateHasChanged();
    }
    void HandleSortByLocation(){
        Query = SortAscending ? Query.OrderBy(e => e.Location.City) : Query.OrderByDescending(e => e.Location.City);
        SortAscending = !SortAscending;
        UpdateData();
        StateHasChanged();
    }

    async Task HandleDelete(Employee e){
        Context.Employees.Remove(e);
        await Context.SaveChangesAsync();
        UpdateData();
        StateHasChanged();
    }

    public void Dispose() => NavManager.LocationChanged -= HandleLocationChanged;
} 